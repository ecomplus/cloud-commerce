name: Deploy

on:
  pull_request:
    paths:
      - "packages/**"
      - "!packages/storefront"
      - "!packages/passort"
      - "!packages/!18n"
      - "!packages/__skeleton"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/e2e-tests.yml"
      - "packages/**"
      - "!packages/storefront"
      - "!packages/passort"
      - "!packages/!18n"
      - "!packages/__skeleton"

jobs:
  setup:
    name: Tests Apps
    runs-on: ubuntu-latest
    if: |
      github.event.head_commit.message != 'Initial commit' &&
      !contains(github.event.head_commit.message, '[skip ci]')

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout Store
        uses: actions/checkout@v3
        with:
          repository: ecomplus/store
          path: store

      # check which files have been updated
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get version
        id: get-version
        shell: bash
        run: |
          json=$(cat package.json)
          version=$(echo "$json" | jq .version)
          name=$(echo "$json" | jq .name)
          echo "VERSION=${name//\"/}-${version//\"/}" >> $GITHUB_OUTPUT

      - name: Install firebase-tools
        run: |
          npm install -g firebase-tools

      - uses: actions/cache@v3
        name: Setup cache build
        env:
          cache-name: packages-build-${{ steps.get-version.outputs.VERSION }}
        with:
          path: |
            node_modules/**
            packages/**
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}

      # If you can't find the libraries then install and compile everything
      # and check if the update was in any app, module or ssr.
      - name: build and create npm link
        run: |
          moduleRun="false"
          eventsRun="false"
          firebaseRun="false"
          ssrRun="false"
          appsRun="false"

          if [ ! -d packages/modules/lib/ ]; then
            pnpm install --no-frozen-lockfile 
            pnpm build
          fi

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ "$file" == *"packages/modules"* && "$moduleRun"=="false" ]]; then
              moduleRun="true"
              cd packages/modules
              pnpm build
              npm link
              cd ../../

              cd packages/firebase
              pnpm build
              npm link
              firebaseRun="true"
              cd ../../

              cd store/functions/modules
              npm link --save @cloudcommerce/modules
              npm link --save @cloudcommerce/firebase
              cd ../../../
            fi

            if [[ "$file" == *"packages/firebase"* && "$firebaseRun"=="false" ]]; then
              cd packages/firebase
              pnpm build
              npm link
              firebaseRun="true"
              cd ../../

              cd store/functions/modules
              npm link --save @cloudcommerce/firebase
              cd ../../../

              cd store/functions/events
              npm link --save @cloudcommerce/firebase
              cd ../../../

              cd store/functions/ssr
              npm link --save @cloudcommerce/firebase
              cd ../../../
            fi

            if [[ "$file" == *"packages/events"* && "$eventsRun"=="false" ]]; then
              cd packages/events
              pnpm build
              npm link
              eventsRun="true"
              cd ../../

              cd store/functions/events
              npm link --save @cloudcommerce/events
              cd ../../../
            fi

            if [[ "$file" == *"packages/apps"* && "$appsRun" == "false" ]]; then
              cd packages/modules
              pnpm build
              npm link
              cd ../../

              cd packages/firebase
              pnpm build
              npm link
              cd ../../

              cd packages/events
              pnpm build
              npm link
              cd ../../
              
              cd store/functions/modules
              npm link --save @cloudcommerce/modules
              npm link --save @cloudcommerce/firebase
              cd ../../../

              cd store/functions/events
              npm link --save @cloudcommerce/events
              npm link --save @cloudcommerce/firebase
              cd ../../../
              appsRun="true"
            fi

            if [[ "$file" == *"packages/ssr"* && "$ssrRun" == "false" ]]; then
              cd packages/ssr
              npm link
              cd ../../

              cd store/functions/ssr
              npm link --save @cloudcommerce/ssr
              npm link --save @cloudcommerce/firebase
              npm link --save @cloudcommerce/api
              cd ../../../
              ssrRun="true"
            fi
          done

        # TODO:
        # other changes that need to be compiled and changed in the store

      - name: Install and build store
        env:
          ECOM_STORE_ID: ${{ secrets.ECOM_STORE_ID }}
          ECOM_AUTHENTICATION_ID: ${{ secrets.ECOM_AUTHENTICATION_ID }}
          ECOM_API_KEY: ${{ secrets.ECOM_API_KEY }}
        run: |
          cd store
          npm i && bash scripts/install.sh
          npm run build
          cd storefront && npm run build && cd ..
          npx firebase --project=test emulators:start --only functions,hosting,firestore &

      - name: Tests store requests
        run: |
          sleep 10
          curl -X GET -I http://localhost:5000/api/modules/list_payments/schema

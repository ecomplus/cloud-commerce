name: 'Deploy Cloud Commerce to Firebase'
description: 'A GitHub Action to deploy https://github.com/ecomplus/cloud-commerce store to Firebase'

inputs:
  github-token:
    description: 'The `GITHUB_TOKEN` secret'
    required: true
  firebase-service-account:
    description: 'Firebase service account JSON'
    required: true
  ecom-authentication-id:
    description: 'E-Com Plus store authentication ID'
    required: true
  ecom-api-key:
    description: 'E-Com Plus store API key'
    required: true
  ecom-store-id:
    description: 'Store ID if not defined in config.json'
  deploy-codebase:
    description: 'Specific Firebase Functions codebase for partial deploy'
  mail-sender:
    description: 'Emails: sender email (default from settings contact email)'
  mail-sender-name:
    description: 'Emails: sender name (default is store name)'
  mail-reply-to:
    description: 'Emails: Reply email'
  smpt-host:
    description: 'Emails: SMTP hostname'
  smpt-port:
    description: 'Emails: SMTP port number'
  smpt-user:
    description: 'Emails: SMTP username'
  smpt-pass:
    description: 'Emails: SMTP password'
  bunnynet-api-key:
    description: 'bunny.net API key (additional CDN layer)'
  sendgrid-api-key:
    description: 'App: SendGrid API key'
  tinyerp-token:
    description: 'App: Tiny ERP API token'
  galaxpay-partner-id:
    description: 'App: Optional Galax Pay partner ID'
  galaxpay-partner-hash:
    description: 'App: Optional Galax Pay partner hash'
  datafrete-operator-token:
    description: 'App: Random token (https://randomkeygen.com/) to validate Datafrete webhooks'
  mercadopago-token: 
    description: 'App: Mercadopago API access token'
  frenet-token:
    description: 'App: Frenet API token'
  galaxpay-id:
    description: 'App: Galax Pay ID'
  galaxpay-hash:
    description: 'App: Galax Pay hash'
  ga-measurement-id:
    description: 'App: Google Analytics API measurement id'
  ga-api-secret:
    description: 'App: Google Analytics API secret'
  infinitepay-id:
    description: 'App: InifinitePay client ID'
  infinitepay-secret: 
    description: 'App: InifinitePay client secret'
  fb-pixel-id:
    description: 'App: Facebook pixel ID'
  fb-graph-token:
    description: 'App: Facebook Graph token'
  jadlog-contract-token:
    description: 'App: Jadlog contract token'
  pagarme-encrypt-key: 
    description: 'App: Pagar.me encryption Key'
  pagarme-token:
    description: 'App: Pagar.me API token'
  pagarme-partner-id:
    description: 'App: Pagar.me partner ID'
  paghiper-token:
    description: 'App: PagHiper API token'
  pix-credentials:
    description: 'App: Pix credentials'
  flashcourier-contract:
    description: 'App: Flash Courier contract'
  webhooks-token:
    description: 'App: Webhooks token'
  mandae-token:
    description: 'App: MandaÃª token'
  correios-user:
    description: 'App: Correios username'
  correios-access-code:
    description: 'App: Correios access code'
  correios-postcard-number:
    description: 'App: Optional Correios postcard number'
  pagarmev5-api-token:
    description: 'App: Pagar.me API V5 token'
  pagarmev5-public-key: 
    description: 'App: Pagar.me API V5 public key'
  tiktok-pixel-id: 
    description: 'App: Tiktok pixel ID'
  tiktok-access-token: 
    description: 'App: Tiktok access token'

outputs: {}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - uses: actions/cache@v3
      id: npm-cache-root
      with:
        path: node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

    - uses: actions/cache@v3
      id: npm-cache-many
      with:
        path: functions/many/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('functions/many/package-lock.json') }}
    
    - uses: actions/cache@v3
      id: npm-cache-ssr
      with:
        path: functions/ssr/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('functions/ssr/package-lock.json') }}
    
    - uses: actions/cache@v3
      id: npm-cache-with-apps
      with:
        path: functions/with-apps/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('functions/with-apps/package-lock.json') }}

    - if: steps.npm-cache-root.outputs.cache-hit != 'true'
      shell: bash
      run: npm ci --omit=dev --ignore-scripts

    - name: Get npm global directories
      id: npm-paths
      shell: bash
      run: |
        lib_path=$(npm list -g | head -1)
        echo "LIB_PATH=$lib_path" >> $GITHUB_OUTPUT
        echo "BIN_PATH=${lib_path/\/lib//bin}" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      id: npm-g-cache
      with:
        path: |
          ${{ steps.npm-paths.outputs.LIB_PATH }}
          ${{ steps.npm-paths.outputs.BIN_PATH }}
          ~/.npm-global/bin
        key: ${{ runner.os }}-npm-g-firebase-tools-13.0.3

    - if: ${{ github.event_name == 'push' && steps.npm-g-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: npm i --location=global firebase-tools@13.0.3

    - if: steps.npm-cache-many.outputs.cache-hit != 'true'
      name: Install codebase "many" dependencies
      shell: bash
      working-directory: functions/many
      run: npm ci

    - if: steps.npm-cache-ssr.outputs.cache-hit != 'true'
      name: Install codebase "ssr" dependencies
      shell: bash
      working-directory: functions/ssr
      run: npm ci

    - if: steps.npm-cache-with-apps.outputs.cache-hit != 'true'
      name: Install codebase "with-apps" dependencies
      shell: bash
      working-directory: functions/with-apps
      run: npm ci

    - name: Set ecom_store_id and git_branch env
      shell: bash
      working-directory: functions
      env:
        ECOM_STORE_ID: ${{ inputs.ecom-store-id }}
      run: |
        echo "ecom_store_id=${ECOM_STORE_ID:-$(cat config.json | jq -r '.storeId')}" >> $GITHUB_ENV
        echo "git_branch=${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}" >> $GITHUB_ENV

    - uses: dorny/paths-filter@v2.11.1
      id: changes
      with:
        filters: |
          many:
            - 'functions/many/**'
          withApps:
            - 'functions/with-apps/**'
          ssr:
            - 'functions/ssr/**'
    
    - name: Check functions codebase to deploy
      shell: bash
      env:
        DEPLOY_CODEBASE: ${{ inputs.deploy-codebase }}
        CHS_MANY: ${{ steps.changes.outputs.many }}
        CHS_WITH_APPS: ${{ steps.changes.outputs.withApps }}
        CHS_SSR: ${{ steps.changes.outputs.ssr }}
      run: |
        if [ -z "$DEPLOY_CODEBASE" ]; then
          if [ $CHS_SSR == 'true' ]; then
            if [ $CHS_MANY != 'true' ] && [ $CHS_WITH_APPS != 'true' ]; then
              deploy_codebase="ssr"
            fi
          elif [ $CHS_MANY == 'true' ] && [ $CHS_WITH_APPS != 'true' ]; then
            deploy_codebase="many"
          elif [ $CHS_MANY != 'true' ] && [ $CHS_WITH_APPS == 'true' ]; then
            deploy_codebase="with-apps"
          fi
        else
          deploy_codebase=$DEPLOY_CODEBASE
        fi
        echo "deploy_codebase=$deploy_codebase" >> $GITHUB_ENV

    - if: github.event_name == 'push'
      name: Deploy to Firebase live
      shell: bash
      env:
        ECOM_STORE_ID: ${{ env.ecom_store_id }}
        GIT_BRANCH: ${{ env.git_branch }}
        DEPLOY_CODEBASE: ${{ env.deploy_codebase }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        FIREBASE_SERVICE_ACCOUNT: ${{ inputs.firebase-service-account }}
        ECOM_AUTHENTICATION_ID: ${{ inputs.ecom-authentication-id }}
        ECOM_API_KEY: ${{ inputs.ecom-api-key }}
        MAIL_SENDER: ${{ inputs.mail-sender }}
        MAIL_SENDER_NAME: ${{ inputs.mail-sender-name }}
        MAIL_REPLY_TO: ${{ inputs.mail-reply-to }}
        SMTP_HOST: ${{ inputs.smpt-host }}
        SMTP_PORT: ${{ inputs.smpt-port }}
        SMTP_USER: ${{ inputs.smpt-user }}
        SMTP_PASS: ${{ inputs.smpt-pass }}
        BUNNYNET_API_KEY: ${{ inputs.bunnynet-api-key }}
        SENDGRID_API_KEY: ${{ inputs.sendgrid-api-key }}
        TINYERP_TOKEN: ${{ inputs.tinyerp-token }}
        GALAXPAY_PARTNER_ID: ${{ inputs.galaxpay-partner-id }}
        GALAXPAY_PARTNER_HASH: ${{ inputs.galaxpay-partner-hash }}
        DATAFRETE_OPERATOR_TOKEN: ${{ inputs.datafrete-operator-token }}
        MERCADOPAGO_TOKEN: ${{ inputs.mercadopago-token }}
        FRENET_TOKEN: ${{ inputs.frenet-token }}
        GALAXPAY_ID: ${{ inputs.galaxpay-id }}
        GALAXPAY_HASH: ${{ inputs.galaxpay-hash }}
        GA_MEASUREMENT_ID: ${{ inputs.ga-measurement-id }}
        GA_API_SECRET: ${{ inputs.ga-api-secret }}
        FB_PIXEL_ID: ${{ inputs.fb-pixel-id }}
        FB_GRAPH_TOKEN: ${{ inputs.fb-graph-token }}
        JADLOG_CONTRACT_TOKEN: ${{ inputs.jadlog-contract-token }}
        PAGARME_ENCRYPT_KEY: ${{ inputs.pagarme-encrypt-key }}
        PAGARME_TOKEN: ${{ inputs.pagarme-token }}
        PAGARME_PARTNER_ID: ${{ inputs.pagarme-partner-id }}
        PAGHIPER_TOKEN: ${{ inputs.paghiper-token }}
        PIX_CREDENTIALS: ${{ inputs.pix-credentials }}
        FLASHCOURIER_CONTRACT: ${{ inputs.flashcourier-contract }}
        WEBHOOKS_TOKEN: ${{ inputs.webhooks-token }}
        MANDAE_TOKEN: ${{ inputs.mandae-token }}
        CORREIOS_USER: ${{ inputs.correios-user }}
        CORREIOS_ACCESS_CODE: ${{ inputs.correios-access-code }}
        CORREIOS_POSTCARD: ${{ inputs.correios-postcard-number }}
        PAGARMEV5_API_TOKEN: ${{ inputs.pagarmev5-api-token }}
        PAGARMEV5_PUBLIC_KEY: ${{ inputs.pagarmev5-public-key }}
        TIKTOK_ACCESS_TOKEN: ${{ inputs.tiktok-access-token }}
        TIKTOK_PIXEL_ID: ${{ inputs.tiktok-pixel-id }}
      run: |
        export GAC_FILENAME=".gac-$RANDOM.json"
        echo $FIREBASE_SERVICE_ACCOUNT > $GAC_FILENAME
        printf "DEPLOY_RAND=$RANDOM$RANDOM
        ECOM_AUTHENTICATION_ID=$ECOM_AUTHENTICATION_ID
        ECOM_API_KEY=$ECOM_API_KEY
        ECOM_STORE_ID=$ECOM_STORE_ID
        GIT_BRANCH=$GIT_BRANCH
        GITHUB_TOKEN=$GITHUB_TOKEN
        DEPLOY_CODEBASE=$DEPLOY_CODEBASE
        MAIL_SENDER=$MAIL_SENDER
        MAIL_SENDER_NAME=$MAIL_SENDER_NAME
        MAIL_REPLY_TO=$MAIL_REPLY_TO
        SMTP_HOST=$SMTP_HOST
        SMTP_PORT=$SMTP_PORT
        SMTP_USER=$SMTP_USER
        SMTP_PASS=$SMTP_PASS
        BUNNYNET_API_KEY=$BUNNYNET_API_KEY
        SENDGRID_API_KEY=$SENDGRID_API_KEY
        TINYERP_TOKEN=$TINYERP_TOKEN
        GALAXPAY_PARTNER_ID=$GALAXPAY_PARTNER_ID
        GALAXPAY_PARTNER_HASH=$GALAXPAY_PARTNER_HASH
        DATAFRETE_OPERATOR_TOKEN=$DATAFRETE_OPERATOR_TOKEN
        MERCADOPAGO_TOKEN=$MERCADOPAGO_TOKEN
        FRENET_TOKEN=$FRENET_TOKEN
        GALAXPAY_ID=$GALAXPAY_ID
        GALAXPAY_HASH=$GALAXPAY_HASH
        GA_MEASUREMENT_ID=$GA_MEASUREMENT_ID
        GA_API_SECRET=$GA_API_SECRET
        FB_PIXEL_ID=$FB_PIXEL_ID
        FB_GRAPH_TOKEN=$FB_GRAPH_TOKEN
        JADLOG_CONTRACT_TOKEN=$JADLOG_CONTRACT_TOKEN
        PAGARME_ENCRYPT_KEY=$PAGARME_ENCRYP_KEY
        PAGARME_TOKEN=$PAGARME_TOKEN
        PAGARME_PARTNER_ID=$PAGARME_PARTNER_ID
        PAGHIPER_TOKEN=$PAGHIPER_TOKEN
        PIX_CREDENTIALS=$PIX_CREDENTIALS
        FLASHCOURIER_CONTRACT=$FLASHCOURIER_CONTRACT
        WEBHOOKS_TOKEN=$WEBHOOKS_TOKEN
        MANDAE_TOKEN=$MANDAE_TOKEN
        CORREIOS_USER=$CORREIOS_USER
        CORREIOS_ACCESS_CODE=$CORREIOS_ACCESS_CODE
        CORREIOS_POSTCARD=$CORREIOS_POSTCARD
        PAGARMEV5_API_TOKEN=$PAGARMEV5_API_TOKEN
        PAGARMEV5_PUBLIC_KEY=$PAGARMEV5_PUBLIC_KEY
        TIKTOK_ACCESS_TOKEN=$TIKTOK_ACCESS_TOKEN
        TIKTOK_PIXEL_ID=$TIKTOK_PIXEL_ID
        " > functions/.env
        if [ -z "$DEPLOY_CODEBASE" ]; then
          BUNNYNET_API_KEY=$BUNNYNET_API_KEY \
          GOOGLE_APPLICATION_CREDENTIALS=$GAC_FILENAME \
          npm run deploy
        else
          if [ $DEPLOY_CODEBASE == "ssr" ]; then
            BUNNYNET_API_KEY=$BUNNYNET_API_KEY \
            GOOGLE_APPLICATION_CREDENTIALS=$GAC_FILENAME \
            npm run deploy -- --only functions:$DEPLOY_CODEBASE,hosting
          else
            GOOGLE_APPLICATION_CREDENTIALS=$GAC_FILENAME \
            npm run deploy -- --only functions:$DEPLOY_CODEBASE
          fi
        fi

    - if: github.event_name == 'pull_request'
      name: Build storefront static
      shell: bash
      env:
        ECOM_STORE_ID: ${{ env.ecom_store_id }}
      run: |
        printf "DEPLOY_RAND=$RANDOM$RANDOM
        ECOM_STORE_ID=$ECOM_STORE_ID
        " > functions/ssr/.env
        if [ ! -f ".firebaserc" ]; then
          echo '{ "projects": { "default": "ecom2-demo" } }' > .firebaserc
        fi
        npm --prefix "functions/ssr/" run build:static && npx cloudcommerce prepare

    - if: github.event_name == 'pull_request'
      name: Deploy Firebase Hosting PR preview
      id: deploy-preview
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: ${{ inputs.github-token }}
        firebaseServiceAccount: ${{ inputs.firebase-service-account }}
        channelId: ${{ (startsWith(env.git_branch, 'main-') && env.git_branch) || null }}
        expires: ${{ (startsWith(env.git_branch, 'main-') && '30d') || null }}

    - if: ${{ github.event_name == 'pull_request' && startsWith(env.git_branch, 'main-') }}
      name: Prepare bunny.net CDN for A/B testing
      shell: bash
      env:
        GIT_BRANCH: ${{ env.git_branch }}
        BUNNYNET_API_KEY: ${{ inputs.bunnynet-api-key }}
        CHANNEL_URL: ${{ steps.deploy-preview.outputs.details_url }}
      run: |
        if [ ! -z "$BUNNYNET_API_KEY" ]; then
          domain=$(cat functions/ssr/content/settings.json | jq -r '.domain')
          if [ ! -z "$domain" ]; then
            bash $GITHUB_ACTION_PATH/packages/cli/ci/bunny-prepare-ab.sh $domain $CHANNEL_URL
          fi
        fi

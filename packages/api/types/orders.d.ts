/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Order object model
 */
export interface Orders {
  /**
   * Order ID (ObjectID) [auto]
   */
  _id: string & { length: 24 };
  /**
   * When object was seted (POST/PUT), date and time in ISO 8601 standard representation [auto]
   */
  created_at: string;
  /**
   * When was it last changed, date and time in ISO 8601 standard representation [auto]
   */
  updated_at: string;
  /**
   * ID of store [auto]
   */
  store_id: number;
  /**
   * Whether order was created by staff and is trusted
   */
  staff_signature?: boolean;
  /**
   * URL to checkout page, if necessary, use `(_id)` where order unique ID must appear at URL
   */
  checkout_link?: string;
  /**
   * URL to order status page, if necessary, use `(_id)` where order unique ID must appear
   */
  status_link?: string;
  /**
   * UTM campaign HTTP parameters
   */
  utm?: {
    /**
     * Parameter 'utm_source', the referrer: (e.g. 'google', 'newsletter')
     */
    source?: string;
    /**
     * Parameter 'utm_medium', the marketing medium: (e.g. 'cpc', 'banner', 'email')
     */
    medium?: string;
    /**
     * Parameter 'utm_campaign', the product, promo code, or slogan (e.g. 'spring_sale')
     */
    campaign?: string;
    /**
     * Parameter 'utm_term', identifies the paid keywords
     */
    term?: string;
    /**
     * Parameter 'utm_content', used to differentiate ads
     */
    content?: string;
  };
  /**
   * The website that the customer clicked on to come to the shop
   */
  referring_site?: string;
  /**
   * Code to identify the affiliate that referred the customer
   */
  affiliate_code?: string;
  /**
   * Initial URL of the session that originated the order
   */
  origin_url?: string;
  /**
   * IP address of the device used by the customer when placing the order
   */
  client_ip?: string;
  /**
   * User-Agent of the browser (if any) used by the customer
   */
  client_user_agent?: string;
  /**
   * Sales channel unique identifier or domain name
   */
  channel_id?: string;
  /**
   * Channel type or source
   */
  channel_type?: 'ecommerce' | 'mobile' | 'pos' | 'button' | 'social' | 'chatbot' | 'live';
  /**
   * Store domain name (numbers and lowercase letters, eg.: www.myshop.sample)
   */
  domain?: string;
  /**
   * Order number, if not specified will be filled auto incrementing
   */
  number?: number;
  /**
   * Order code used by seller and customer for identification, should be unique
   */
  code?: string;
  /**
   * Order main status
   */
  status?: 'open' | 'closed' | 'cancelled';
  /**
   * Date and time when order was opened, in ISO 8601 standard representation [auto]
   */
  opened_at?: string;
  /**
   * If the order is closed, specify the date and time it occurred
   */
  closed_at?: string;
  /**
   * If the order is cancelled, specify the date and time it occurred
   */
  cancelled_at?: string;
  /**
   * If the order is cancelled, specify the reason why it was cancelled
   */
  cancel_reason?: 'customer' | 'fraud' | 'inventory' | 'declined' | 'other';
  /**
   * Order status created by seller
   */
  seller_status?: string;
  /**
   * Financial status and date of change
   */
  financial_status?: {
    /**
     * Last status change, date and time in ISO 8601 standard representation [auto]
     */
    updated_at?: string;
    /**
     * Order financial status
     */
    current:
      | 'pending'
      | 'under_analysis'
      | 'authorized'
      | 'unauthorized'
      | 'partially_paid'
      | 'paid'
      | 'in_dispute'
      | 'partially_refunded'
      | 'refunded'
      | 'voided'
      | 'unknown';
    /**
     * Flags to associate additional info
     *
     * @maxItems 10
     */
    flags?: string[];
  };
  /**
   * Fulfillment status and date of change
   */
  fulfillment_status?: {
    /**
     * Last status change, date and time in ISO 8601 standard representation [auto]
     */
    updated_at?: string;
    /**
     * Order fulfillment (shipping) status
     */
    current:
      | 'invoice_issued'
      | 'in_production'
      | 'in_separation'
      | 'ready_for_shipping'
      | 'partially_shipped'
      | 'shipped'
      | 'partially_delivered'
      | 'delivered'
      | 'returned_for_exchange'
      | 'received_for_exchange'
      | 'returned';
    /**
     * Flags to associate additional info
     *
     * @maxItems 10
     */
    flags?: string[];
  };
  /**
   * Designator of currency according to ISO 4217 (3 uppercase letters)
   */
  currency_id?: string;
  /**
   * Graphic symbol used as a shorthand for currency's name
   */
  currency_symbol?: string;
  /**
   * Object with sums of values
   */
  amount: {
    /**
     * Order total amount
     */
    total: number;
    /**
     * The sum of all items prices
     */
    subtotal?: number;
    /**
     * Order freight cost
     */
    freight?: number;
    /**
     * Final discount value applied
     */
    discount?: number;
    /**
     * Value deducted via balance in wallet or loyalty points
     */
    balance?: number;
    /**
     * The sum of all the taxes applied to the order
     */
    tax?: number;
    /**
     * Sum of optional extra costs applied
     */
    extra?: number;
  };
  /**
   * Name or summary of order payment method(s)
   */
  payment_method_label?: string;
  /**
   * Name of order shipping method(s)
   */
  shipping_method_label?: string;
  /**
   * List of order customers
   *
   * @maxItems 20
   */
  buyers?: {
    /**
     * Customer ID (ObjectID)
     */
    _id: string & { length: 24 };
    /**
     * Customer language two letter code, sometimes with region, e.g. 'pt_br', 'fr', 'en_us'
     */
    locale?: string;
    /**
     * Customer main email address
     */
    main_email?: string;
    /**
     * List of customer email addresses
     *
     * @maxItems 20
     */
    emails?: {
      /**
       * The actual email address
       */
      address: string;
      /**
       * The type of email
       */
      type?: 'work' | 'home' | 'other';
      /**
       * States whether or not the email address has been verified
       */
      verified?: boolean;
    }[];
    /**
     * The name of this Customer, suitable for display
     */
    display_name?: string;
    /**
     * Customer name object
     */
    name?: {
      /**
       * The family name of this user, or "last name"
       */
      family_name?: string;
      /**
       * The "first name" of this user
       */
      given_name?: string;
      /**
       * The middle name(s) of this user
       */
      middle_name?: string;
    };
    /**
     * Customer preferred pronoun
     */
    pronoun?: 'he' | 'she';
    /**
     * List of customer phone numbers
     *
     * @maxItems 20
     */
    phones?: {
      /**
       * Country calling code (without +), defined by standards E.123 and E.164
       */
      country_code?: number;
      /**
       * The actual phone number, digits only
       */
      number: string;
      /**
       * The type of phone
       */
      type?: 'home' | 'personal' | 'work' | 'other';
    }[];
    /**
     * Physical or juridical (company) person
     */
    registry_type?: 'p' | 'j';
    /**
     * Country of document origin, an ISO 3166-2 code
     */
    doc_country?: string;
    /**
     * Responsible person or organization document number (only numbers)
     */
    doc_number?: string;
    /**
     * Municipal or state registration if exists
     */
    inscription_type?: 'State' | 'Municipal';
    /**
     * Municipal or state registration number (with characters) if exists
     */
    inscription_number?: string;
    /**
     * Registered company name or responsible fullname
     */
    corporate_name?: string;
  }[];
  /**
   * Whether the order is only budget, without payment transactions
   */
  budget_only?: boolean;
  /**
   * List of shipping methods and address for this order
   *
   * @maxItems 100
   */
  shipping_lines?: {
    /**
     * Shipping line ID (ObjectID) [auto]
     */
    _id?: string & { length: 24 };
    from: Address;
    to: Address1;
    /**
     * Shipping object information
     */
    package?: {
      /**
       * Package dimensions
       */
      dimensions?: {
        /**
         * Package width, height and length
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^width|height|length$".
         */
        [k: string]: {
          /**
           * Size in specified unit
           */
          value: number;
          /**
           * Unit of measurement
           */
          unit?: 'mm' | 'cm' | 'm' | 'ft' | 'in' | 'yd' | 'mi';
        };
      };
      /**
       * Package weight for freight calculation
       */
      weight?: {
        /**
         * Size in specified unit
         */
        value: number;
        /**
         * Unit of measurement
         */
        unit?: 'mg' | 'g' | 'kg' | 'lb' | 'oz';
      };
    };
    /**
     * Shipping method (by application) chosen by customer
     */
    app?: {
      /**
       * Application ID (ObjectID)
       */
      _id?: string & { length: 24 };
      /**
       * Name of shipping method shown to customers
       */
      label?: string;
      /**
       * Carrier name
       */
      carrier?: string;
      /**
       * Carrier document number (only numbers)
       */
      carrier_doc_number?: string;
      /**
       * Name of service (shipping method) defined by carrier
       */
      service_name?: string;
      /**
       * Code of service defined by carrier
       */
      service_code?: string;
      /**
       * Contract number of the shop with carrier, if exists
       */
      contract?: string;
      /**
       * Shipping method icon image URI
       */
      icon?: string;
      /**
       * URI to carrier website to get package tracking status
       */
      tracking_url?: string;
    };
    /**
     * Pick up option when no (or optional) freight
     */
    pick_up?: 'store' | 'locker' | 'point' | 'other';
    /**
     * Freight cost for this shipping line, without additionals
     */
    price?: number;
    /**
     * The package value declared to carrier, generally the sum of all items prices
     */
    declared_value?: number;
    /**
     * Cost for the "declared value" additional service
     */
    declared_value_price?: number;
    /**
     * Whether the package must be delivered with additional service "own hand"
     */
    own_hand?: boolean;
    /**
     * Cost for the "own hand" additional service
     */
    own_hand_price?: number;
    /**
     * If the package will be delivered with acknowledgment of receipt
     */
    receipt?: boolean;
    /**
     * Cost for the "acknowledgment of receipt" additional service
     */
    receipt_price?: number;
    /**
     * List of other additional services for this shipping line
     *
     * @maxItems 30
     */
    other_additionals?: {
      /**
       * Tag to identify object, use only lowercase letters, digits and underscore
       */
      tag?: string;
      /**
       * Name of the additional service
       */
      label: string;
      /**
       * Cost for this additional service
       */
      price?: number;
    }[];
    /**
     * List of taxes or other additional services for this shipping line
     *
     * @maxItems 30
     */
    taxes?: {
      /**
       * Tag to identify object, use only lowercase letters, digits and underscore
       */
      tag?: string;
      /**
       * Tax title
       */
      label: string;
      /**
       * Tax value applied
       */
      price?: number;
      /**
       * Tax rate as a function of package value
       */
      rate?: number;
    }[];
    /**
     * Discount on shipping price, negative if value was additionated (not discounted)
     */
    discount?: number;
    /**
     * Total cost for this shipping line, with additionals and taxes
     */
    total_price?: number;
    /**
     * Deadline for sending the package
     */
    posting_deadline?: {
      /**
       * Number of days to post the product after purchase
       */
      days: number;
      /**
       * If the deadline is calculated in working days
       */
      working_days?: boolean;
      /**
       * Whether days will be counted after payment approval
       */
      after_approval?: boolean;
    };
    /**
     * Estimated delivery time
     */
    delivery_time?: {
      /**
       * Number of days for delivery after shipping
       */
      days: number;
      /**
       * If the deadline is calculated in working days
       */
      working_days?: boolean;
    };
    /**
     * Date range when delivery will be made
     */
    scheduled_delivery?: {
      /**
       * Scheduled date and time on the ISO 8601 representation
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^start|end$".
       */
      [k: string]: string;
    };
    /**
     * Additional text instructions for pick up or custom delivery process
     */
    delivery_instructions?: string;
    /**
     * List of codes for delivery status follow-up
     *
     * @maxItems 30
     */
    tracking_codes?: {
      /**
       * Tag to identify object, use only lowercase letters, digits and underscore
       */
      tag?: string;
      /**
       * Tracking code string
       */
      code: string;
      /**
       * URI for carrier website to get the tracking status with this code
       */
      link?: string;
    }[];
    /**
     * List of invoices
     *
     * @maxItems 30
     */
    invoices?: {
      /**
       * Company that issued this invoice, usually the store company
       */
      issuer?: {
        /**
         * Organization document number (only numbers)
         */
        doc_number?: string;
        /**
         * Municipal or state registration if exists
         */
        inscription_type?: 'State' | 'Municipal';
        /**
         * Municipal or state registration number (with characters) if exists
         */
        inscription_number?: string;
        /**
         * Registered company name
         */
        corporate_name?: string;
      };
      /**
       * Invoice number
       */
      number: string;
      /**
       * Invoice serial number
       */
      serial_number?: string;
      /**
       * Date and time of issue, in ISO 8601 standard representation [auto]
       */
      issued_at?: string;
      /**
       * URI to invoice file
       */
      link?: string;
      /**
       * Invoice access key (BR)
       */
      access_key?: string;
      /**
       * URI to DANFE (BR)
       */
      link_danfe?: string;
    }[];
    /**
     * Fulfillment status and date of change
     */
    status?: {
      /**
       * Last status change, date and time in ISO 8601 standard representation [auto]
       */
      updated_at?: string;
      /**
       * Shipping status
       */
      current:
        | 'invoice_issued'
        | 'in_production'
        | 'in_separation'
        | 'ready_for_shipping'
        | 'shipped'
        | 'delivered'
        | 'returned_for_exchange'
        | 'received_for_exchange'
        | 'returned';
    };
    /**
     * For multi DC, set warehouse where the stock will be handled
     */
    warehouse_code?: string;
    /**
     * List of order items related with this shipping line, use only if items are divided
     *
     * @maxItems 3000
     */
    items?: string[];
    /**
     * Flags to associate additional info
     *
     * @maxItems 10
     */
    flags?: string[];
    /**
     * List of custom fields
     *
     * @maxItems 10
     */
    custom_fields?: {
      /**
       * Field name
       */
      field: string;
      /**
       * Field value
       */
      value: string;
    }[];
    /**
     * Optional notes with additional info about this shipping line
     */
    notes?: string;
  }[];
  /**
   * List of payment transactions for this order
   *
   * @maxItems 100
   */
  transactions?: {
    /**
     * Transaction ID (ObjectID) [auto]
     */
    _id?: string & { length: 24 };
    /**
     * Date and time of transaction creation, in ISO 8601 standard representation [auto]
     */
    created_at?: string;
    /**
     * Transaction type
     */
    type?: 'payment' | 'recurrence';
    /**
     * Payment method object
     */
    payment_method: {
      /**
       * Standardized payment method code
       */
      code:
        | 'credit_card'
        | 'banking_billet'
        | 'online_debit'
        | 'account_deposit'
        | 'debit_card'
        | 'balance_on_intermediary'
        | 'loyalty_points'
        | 'other';
      /**
       * Short description for payment method
       */
      name?: string;
    };
    /**
     * Direct link to pay current transaction
     */
    payment_link?: string;
    /**
     * Additional text instructions for manual payments
     */
    payment_instructions?: string;
    /**
     * Transation payer info
     */
    payer?: {
      /**
       * Payer full name or company corporate name
       */
      fullname?: string;
      /**
       * Date of payer birth
       */
      birth_date?: {
        /**
         * Day of birth
         */
        day?: number;
        /**
         * Number of month of birth
         */
        month?: number;
        /**
         * Year of birth
         */
        year?: number;
      };
      /**
       * Payer contact phone
       */
      phone?: {
        /**
         * Country calling code (without +), defined by standards E.123 and E.164
         */
        country_code?: number;
        /**
         * The actual phone number, digits only
         */
        number: string;
        /**
         * The type of phone
         */
        type?: 'home' | 'personal' | 'work' | 'other';
      };
      /**
       * Physical or juridical (company) person
       */
      registry_type?: 'p' | 'j';
      /**
       * Country of document origin, an ISO 3166-2 code
       */
      doc_country?: string;
      /**
       * Responsible person or organization document number (only numbers)
       */
      doc_number?: string;
    };
    billing_address?: Address2;
    /**
     * Payment method (by application) chosen by customer
     */
    app?: {
      /**
       * Application ID (ObjectID)
       */
      _id?: string & { length: 24 };
      /**
       * Name of payment method shown to customers
       */
      label?: string;
      /**
       * Payment icon image URI
       */
      icon?: string;
      /**
       * Payment intermediator
       */
      intermediator?: {
        /**
         * Name of payment intermediator
         */
        name?: string;
        /**
         * URI to intermediator website
         */
        link?: string;
        /**
         * Gateway name standardized as identification code
         */
        code: string;
      };
      /**
       * Base URI to payments
       */
      payment_url?: string;
    };
    /**
     * Transaction properties in the intermediator
     */
    intermediator?: {
      /**
       * Transaction ID in the intermediator
       */
      transaction_id?: string;
      /**
       * Transaction code in the intermediator
       */
      transaction_code?: string;
      /**
       * Transaction reference code
       */
      transaction_reference?: string;
      /**
       * Payment method as defined by intermediator
       */
      payment_method?: {
        /**
         * Payment method code
         */
        code: string;
        /**
         * Short description for payment method
         */
        name?: string;
      };
      /**
       * ID of customer account in the intermediator
       */
      buyer_id?: string;
    };
    /**
     * Credit card data, if payment was done with credit card
     */
    credit_card?: {
      /**
       * Full name of the holder, as it is on the credit card
       */
      holder_name?: string;
      /**
       * Response code from AVS: http://www.emsecommerce.net/avs_cvv2_response_codes.htm
       */
      avs_result_code?: string | null;
      /**
       * Response code from credit card company, such as AVS result code
       */
      cvv_result_code?: string | null;
      /**
       * Issuer identification number (IIN), known as bank identification number (BIN)
       */
      bin?: number;
      /**
       * Credit card issuer name, eg.: Visa, American Express, MasterCard
       */
      company?: string;
      /**
       * Last digits (up to 4) of credit card number
       */
      last_digits?: string;
      /**
       * Unique credit card token
       */
      token?: string;
      /**
       * Credit card processing standardized error code
       */
      error_code?:
        | 'incorrect_number'
        | 'invalid_number'
        | 'invalid_expiry_date'
        | 'invalid_cvc'
        | 'expired_card'
        | 'incorrect_cvc'
        | 'incorrect_zip'
        | 'incorrect_address'
        | 'card_declined'
        | 'processing_error'
        | 'call_issuer'
        | 'pick_up_card';
    };
    /**
     * Banking billet data, if payment was done with banking billet
     */
    banking_billet?: {
      /**
       * Ticket code, generally a barcode number
       */
      code?: string;
      /**
       * Date and time of expiration, in ISO 8601 standard representation
       */
      valid_thru?: string;
      /**
       * Text lines on ticket
       *
       * @maxItems 5
       */
      text_lines?: string[];
      /**
       * Direct link (URI) to banking billet
       */
      link?: string;
    };
    /**
     * Account deposit data, if payment was done with account deposit
     */
    account_deposit?: {
      /**
       * Date and time of expiration, in ISO 8601 standard representation
       */
      valid_thru?: string;
      /**
       * Information notes to payment
       *
       * @maxItems 5
       */
      text_lines?: string[];
    };
    /**
     * If paid with loyalty points, specify how many points and what program was consumed
     */
    loyalty_points?: {
      /**
       * The name of the loyalty points program
       */
      name?: string;
      /**
       * Unique identifier, program name using only lowercase, numbers and underscore
       */
      program_id: string;
      /**
       * Number of loyalty points applied from customer account
       */
      points_value: number;
      /**
       * The ratio of a point when converted to currency
       */
      ratio?: number;
    };
    /**
     * Currency ID specific for this transaction, if different of order currency ID
     */
    currency_id?: string;
    /**
     * Currency symbol specific for this transaction
     */
    currency_symbol?: string;
    /**
     * Discount by payment method, negative if value was additionated (not discounted)
     */
    discount?: number;
    /**
     * Transaction amount, disregarding installment rates
     */
    amount: number;
    /**
     * Installments option
     */
    installments?: {
      /**
       * Number of installments
       */
      number: number;
      /**
       * Installment value
       */
      value?: number;
      /**
       * Tax applied
       */
      tax?: boolean;
      /**
       * Total value, sum of all plots
       */
      total?: number;
    };
    /**
     * Financial status and date of change
     */
    status?: {
      /**
       * Last status change, date and time in ISO 8601 standard representation [auto]
       */
      updated_at?: string;
      /**
       * Payment status
       */
      current:
        | 'pending'
        | 'under_analysis'
        | 'authorized'
        | 'unauthorized'
        | 'paid'
        | 'in_dispute'
        | 'refunded'
        | 'voided'
        | 'unknown';
    };
    /**
     * List of order items related with this transaction, use only if items are divided
     *
     * @maxItems 3000
     */
    items?: string[];
    /**
     * Flags to associate additional info
     *
     * @maxItems 10
     */
    flags?: string[];
    /**
     * List of custom fields
     *
     * @maxItems 10
     */
    custom_fields?: {
      /**
       * Field name
       */
      field: string;
      /**
       * Field value
       */
      value: string;
    }[];
    /**
     * Optional notes with additional info about this transaction
     */
    notes?: string;
  }[];
  /**
   * Historical of payments and financial status changes
   *
   * @maxItems 3000
   */
  payments_history?: {
    /**
     * Payment status ID (ObjectID) [auto]
     */
    _id?: string & { length: 24 };
    /**
     * ID of transaction related with this event
     */
    transaction_id?: string;
    /**
     * Date and time of the event, in ISO 8601 standard representation [auto]
     */
    date_time?: string;
    /**
     * Payment status
     */
    status:
      | 'pending'
      | 'under_analysis'
      | 'authorized'
      | 'unauthorized'
      | 'paid'
      | 'in_dispute'
      | 'refunded'
      | 'voided'
      | 'unknown';
    /**
     * Code of received notification with this status change
     */
    notification_code?: string;
    /**
     * If customer was already notified of this event
     */
    customer_notified?: boolean;
    /**
     * Flags to associate additional info
     *
     * @maxItems 10
     */
    flags?: string[];
  }[];
  /**
   * Fulfillment and tracking events
   *
   * @maxItems 3000
   */
  fulfillments?: {
    /**
     * Fulfillment status ID (ObjectID) [auto]
     */
    _id?: string & { length: 24 };
    /**
     * ID of shipping line related with this event
     */
    shipping_line_id?: string & { length: 24 };
    /**
     * Date and time of the event, in ISO 8601 standard representation [auto]
     */
    date_time?: string;
    /**
     * Fulfillment status
     */
    status:
      | 'invoice_issued'
      | 'in_production'
      | 'in_separation'
      | 'ready_for_shipping'
      | 'shipped'
      | 'delivered'
      | 'returned_for_exchange'
      | 'received_for_exchange'
      | 'returned';
    /**
     * Code of received notification with this status change
     */
    notification_code?: string;
    /**
     * If customer was already notified of this event
     */
    customer_notified?: boolean;
    /**
     * Flags to associate additional info
     *
     * @maxItems 10
     */
    flags?: string[];
  }[];
  /**
   * Products composing the order
   *
   * @maxItems 3000
   */
  items?: {
    /**
     * Order item ID (ObjectID) [auto]
     */
    _id?: string & { length: 24 };
    /**
     * Product ID
     */
    product_id: string & { length: 24 };
    /**
     * ID to specify the variation added to cart, if product has variations
     */
    variation_id?: string & { length: 24 };
    /**
     * Product or variation unique reference code
     */
    sku?: string;
    /**
     * Product or variation full name, or other label for this cart item
     */
    name?: string;
    /**
     * Product slug to complete page URL
     */
    slug?: string;
    /**
     * Product or variation picture for this cart item
     */
    picture?: {
      normal?: PictureSize;
      big?: PictureSize1;
      zoom?: PictureSize2;
      small?: PictureSize3;
    };
    /**
     * Item customization fields
     *
     * @maxItems 100
     */
    customizations?: {
      /**
       * Title for this customization field, can be the grid title
       */
      label?: string;
      /**
       * Option chosen or created by customer
       */
      option: {
        /**
         * Option ID (ObjectID) if it was predefined (not custom value created by customer)
         */
        _id?: string & { length: 24 };
        /**
         * Option text value displayed for the client
         */
        text: string;
      };
      /**
       * URL of file attached by customer to this field
       */
      attachment?: string;
      /**
       * Price alteration due to this customization
       */
      add_to_price?: {
        /**
         * Type of price addition
         */
        type?: 'percentage' | 'fixed';
        /**
         * Additional value, could be negative
         */
        addition: number;
      };
    }[];
    /**
     * Parent kit product for this item
     */
    kit_product?: {
      /**
       * Kit product ID (ObjectID)
       */
      _id: string & { length: 24 };
      /**
       * Kit product full name
       */
      name?: string;
      /**
       * Total quantity of items to close a kit unit
       */
      pack_quantity?: number;
      /**
       * Kit total pack price
       */
      price?: number;
      /**
       * Current kit composition
       *
       * @maxItems 100
       */
      composition?: {
        /**
         * Product ID (ObjectID)
         */
        _id: string & { length: 24 };
        /**
         * Selected variation ID (ObjectID) if any
         */
        variation_id?: string & { length: 24 };
        /**
         * Kit item quantity
         */
        quantity?: number;
      }[];
    };
    /**
     * Gift wrap chosen by customer
     */
    gift_wrap?: {
      /**
       * Tag to identify object, use only lowercase letters, digits and underscore
       */
      tag?: string;
      /**
       * Title describing this gift wrap
       */
      label: string;
      /**
       * Additional value due to this gift wrap
       */
      add_to_price?: number;
    };
    /**
     * Item quantity in cart
     */
    quantity: number;
    /**
     * Item stock management state respective to order status
     */
    stock_status?: 'pending' | 'released' | 'returned' | 'unmanaged' | 'out_of_stock' | '__releasing';
    /**
     * Product sale price specifically for this cart
     */
    price: number;
    /**
     * Final item price including additions due to customizations and gift wrap
     */
    final_price?: number;
    /**
     * Item's original price for comparison, without discounts
     */
    base_price?: number;
    /**
     * Flags to associate additional info
     *
     * @maxItems 10
     */
    flags?: string[];
  }[];
  /**
   * Extra discount applied by coupon or UTM campaign
   */
  extra_discount?: {
    /**
     * Text of discount coupon applied by customer
     */
    discount_coupon?: string;
    /**
     * Extra discount value
     */
    value: number;
    /**
     * Extra discount rule (by application)
     */
    app?: {
      /**
       * Application ID (ObjectID)
       */
      _id?: string & { length: 24 };
      /**
       * Name of the discount rule, can be the coupon or campaign name
       */
      label?: string;
      /**
       * Additional text description for the discount rule
       */
      description?: string;
    };
    /**
     * Flags to associate additional info
     *
     * @maxItems 10
     */
    flags?: string[];
  };
  /**
   * Original subscription (recurrence) order
   */
  subscription_order?: {
    /**
     * Subscription order ID (ObjectID)
     */
    _id: string & { length: 24 };
    /**
     * Subscription order number
     */
    number?: number;
  };
  /**
   * List of custom attributes
   *
   * @maxItems 100
   */
  metafields?: {
    /**
     * String to help distinguish who (or which app) created and can use the metafield
     */
    namespace?: string;
    /**
     * Field name
     */
    field?: string;
    /**
     * Custom property value
     */
    value: {
      [k: string]: unknown;
    };
  }[];
  /**
   * List of custom attributes
   *
   * @maxItems 100
   */
  hidden_metafields?: {
    /**
     * String to help distinguish who (or which app) created and can use the metafield
     */
    namespace?: string;
    /**
     * Field name
     */
    field?: string;
    /**
     * Custom property value
     */
    value: {
      [k: string]: unknown;
    };
  }[];
  /**
   * List of custom attributes, hidden by default, visible for the order buyers
   *
   * @maxItems 100
   */
  private_metafields?: {
    /**
     * String to help distinguish who (or which app) created and can use the metafield
     */
    namespace?: string;
    /**
     * Field name
     */
    field?: string;
    /**
     * Custom property value
     */
    value: {
      [k: string]: unknown;
    };
  }[];
  /**
   * Flags to associate additional info
   *
   * @maxItems 10
   */
  flags?: string[];
  /**
   * Optional notes with additional info about this order
   */
  notes?: string;
  /**
   * Description and notes about this order, available only for shop administrators
   */
  staff_notes?: string;
}
/**
 * Sender's address
 */
export interface Address {
  /**
   * ZIP (CEP, postal...) code
   */
  zip: string;
  /**
   * Street or public place name
   */
  street?: string;
  /**
   * House or building street number
   */
  number?: number;
  /**
   * Address complement or second line, such as apartment number
   */
  complement?: string;
  /**
   * Borough name
   */
  borough?: string;
  /**
   * Some optional other reference for this address
   */
  near_to?: string;
  /**
   * Full in line mailing address, should include street, number and borough
   */
  line_address?: string;
  /**
   * City name
   */
  city?: string;
  /**
   * Country name
   */
  country?: string;
  /**
   * An ISO 3166-2 country code
   */
  country_code?: string;
  /**
   * Province or state name
   */
  province?: string;
  /**
   * The two-letter code for the province or state
   */
  province_code?: string;
  /**
   * The name of recipient, generally is the customer's name
   */
  name?: string;
  /**
   * The recipient's last name
   */
  last_name?: string;
  /**
   * Customer phone number for this mailing address
   */
  phone?: {
    /**
     * Country calling code (without +), defined by standards E.123 and E.164
     */
    country_code?: number;
    /**
     * The actual phone number, digits only
     */
    number: string;
  };
}
/**
 * Shipping address (recipient)
 */
export interface Address1 {
  /**
   * ZIP (CEP, postal...) code
   */
  zip: string;
  /**
   * Street or public place name
   */
  street?: string;
  /**
   * House or building street number
   */
  number?: number;
  /**
   * Address complement or second line, such as apartment number
   */
  complement?: string;
  /**
   * Borough name
   */
  borough?: string;
  /**
   * Some optional other reference for this address
   */
  near_to?: string;
  /**
   * Full in line mailing address, should include street, number and borough
   */
  line_address?: string;
  /**
   * City name
   */
  city?: string;
  /**
   * Country name
   */
  country?: string;
  /**
   * An ISO 3166-2 country code
   */
  country_code?: string;
  /**
   * Province or state name
   */
  province?: string;
  /**
   * The two-letter code for the province or state
   */
  province_code?: string;
  /**
   * The name of recipient, generally is the customer's name
   */
  name?: string;
  /**
   * The recipient's last name
   */
  last_name?: string;
  /**
   * Customer phone number for this mailing address
   */
  phone?: {
    /**
     * Country calling code (without +), defined by standards E.123 and E.164
     */
    country_code?: number;
    /**
     * The actual phone number, digits only
     */
    number: string;
  };
}
/**
 * The mailing address associated with the payment method
 */
export interface Address2 {
  /**
   * ZIP (CEP, postal...) code
   */
  zip: string;
  /**
   * Street or public place name
   */
  street?: string;
  /**
   * House or building street number
   */
  number?: number;
  /**
   * Address complement or second line, such as apartment number
   */
  complement?: string;
  /**
   * Borough name
   */
  borough?: string;
  /**
   * Some optional other reference for this address
   */
  near_to?: string;
  /**
   * Full in line mailing address, should include street, number and borough
   */
  line_address?: string;
  /**
   * City name
   */
  city?: string;
  /**
   * Country name
   */
  country?: string;
  /**
   * An ISO 3166-2 country code
   */
  country_code?: string;
  /**
   * Province or state name
   */
  province?: string;
  /**
   * The two-letter code for the province or state
   */
  province_code?: string;
  /**
   * The name of recipient, generally is the customer's name
   */
  name?: string;
  /**
   * The recipient's last name
   */
  last_name?: string;
  /**
   * Customer phone number for this mailing address
   */
  phone?: {
    /**
     * Country calling code (without +), defined by standards E.123 and E.164
     */
    country_code?: number;
    /**
     * The actual phone number, digits only
     */
    number: string;
  };
}
/**
 * Default image size variant
 */
export interface PictureSize {
  /**
   * Image link
   */
  url: string;
  /**
   * Image size (width x height) in px, such as 100x50 (100px width, 50px height)
   */
  size?: string;
  /**
   * Alternative text, HTML alt tag (important for SEO)
   */
  alt?: string;
}
/**
 * Image big size variant
 */
export interface PictureSize1 {
  /**
   * Image link
   */
  url: string;
  /**
   * Image size (width x height) in px, such as 100x50 (100px width, 50px height)
   */
  size?: string;
  /**
   * Alternative text, HTML alt tag (important for SEO)
   */
  alt?: string;
}
/**
 * Image zoom size variant
 */
export interface PictureSize2 {
  /**
   * Image link
   */
  url: string;
  /**
   * Image size (width x height) in px, such as 100x50 (100px width, 50px height)
   */
  size?: string;
  /**
   * Alternative text, HTML alt tag (important for SEO)
   */
  alt?: string;
}
/**
 * Image small size variant
 */
export interface PictureSize3 {
  /**
   * Image link
   */
  url: string;
  /**
   * Image size (width x height) in px, such as 100x50 (100px width, 50px height)
   */
  size?: string;
  /**
   * Alternative text, HTML alt tag (important for SEO)
   */
  alt?: string;
}

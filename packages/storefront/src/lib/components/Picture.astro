---
import { resolve as resolvePath } from 'node:path';
import imageSize from 'image-size';
import { getPicture } from '@astrojs/image';
import { type PictureProps, useSSRPicture } from '../../images/use-ssr-picture';

export type Props = PictureProps;

const deployRand = process.env.DEPLOY_RAND || '_';

const getImageFilepath = (src: string) => {
  const { STOREFRONT_BASE_DIR } = import.meta.env;
  return resolvePath(STOREFRONT_BASE_DIR, `public${src}`);
};
const tryImageSize = (src: string) => {
  let dimensions: { width?: number, height?: number } = {};
  if (typeof src === 'string' && src.startsWith('/')) {
    try {
      dimensions = imageSize(getImageFilepath(src));
    } catch (e) {
      dimensions = {};
    }
  }
  return dimensions;
};

const {
  sizes,
  sources,
  pictureAttrs,
  imgAttrs,
} = await useSSRPicture({
  ...Astro.props,
  tryImageSize,
  getPicture,
});
if (imgAttrs) {
  imgAttrs.src += `&V=${deployRand}`;
}
---

<picture {...pictureAttrs}>
  {sources.map((attrs) => <source
    type={attrs.type}
    srcset={attrs.srcset.replace(/\s(\w+)$/, `&V=${deployRand} $1`)}
    sizes={sizes}
  />)}
  {imgAttrs && <img {...imgAttrs} />}
</picture>

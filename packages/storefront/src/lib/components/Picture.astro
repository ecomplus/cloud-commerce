---
import type { PictureComponentRemoteImageProps } from '@astrojs/image/components/';
import { resolve as resolvePath } from 'path';
import imageSize from 'image-size';
import { getPicture } from '@astrojs/image';

export type Props = Omit<PictureComponentRemoteImageProps, 'aspectRatio'> & {
  aspectRatio?: PictureComponentRemoteImageProps['aspectRatio'],
  fetchpriority?: 'high' | 'low' | 'auto',
};

const tryImageSize = (src: string) => {
  let dimensions: { width?: number, height?: number } = {};
  if (typeof src === 'string' && src.startsWith('/')) {
    const { STOREFRONT_BASE_DIR } = import.meta.env;
    try {
      dimensions = imageSize(resolvePath(STOREFRONT_BASE_DIR, `public${src}`));
    } catch (e) {
      dimensions = {};
    }
  }
  return dimensions;
};

const getAspectRatio = (src: string | { width?: number, height?: number }) => {
  if (typeof src === 'string') {
    src = tryImageSize(src);
  }
  if (src.width) {
    return src.height ? src.width / src.height : 1;
  }
  return 0;
};

const {
  src,
  alt,
  sizes,
  widths,
  aspectRatio: propAspectRatio,
  fit,
  background,
  position,
  formats = ['avif', 'webp'],
  loading = 'lazy',
  decoding = 'async',
  ...attrs
} = Astro.props;

let aspectRatio = propAspectRatio;
if ((!attrs.width || !attrs.height) && !aspectRatio && typeof src === 'string') {
  const { width, height } = tryImageSize(src);
  if (height) {
    aspectRatio = getAspectRatio({ width, height });
    attrs.width = width;
    attrs.height = height;
  }
}

const { image, sources } = await getPicture({
  src,
  widths,
  formats,
  aspectRatio,
  fit,
  background,
  position,
  alt,
});
const imgSrc = `${image.src}&V=${process.env.DEPLOY_RAND}`;
delete image.src;
delete image.width;
delete image.height;
---

<picture>
  {sources.map((attrs) => <source
    type={attrs.type}
    srcset={attrs.srcset.replace(/\s(\w+)$/, `&V=${process.env.DEPLOY_RAND} $1`)}
    sizes={sizes}
  />)}
  <img
    {...image}
    loading={loading}
    decoding={decoding}
    src={imgSrc}
    {...attrs}
  />
</picture>

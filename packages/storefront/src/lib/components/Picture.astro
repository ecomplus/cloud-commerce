---
import type { ImageMetadata } from 'astro';
import { resolve as resolvePath, basename } from 'node:path';
import { copyFileSync } from 'node:fs';
import { lookup } from 'mrmime';
import { getImage } from 'astro:assets';
import { imageSizeFromFile } from 'image-size/fromFile';
import { createPictureGetter } from '../../images/picture-base';
import { type PictureProps, useSSRPicture } from '../../images/use-ssr-picture';

export type Props = PictureProps;

const deployRand = import.meta.env.DEPLOY_RAND;
const versionSuffix = import.meta.env.BUILD_OUTPUT !== 'static' && deployRand
  ? `&V=${deployRand}`
  : '';

const getImageFilepath = (src: string) => {
  const filepath = resolvePath(import.meta.env.STOREFRONT_BASE_DIR, `public${src}`);
  if (import.meta.env.BUILD_OUTPUT === 'static') {
    try {
      copyFileSync(filepath, resolvePath(
        import.meta.env.STOREFRONT_BASE_DIR,
        import.meta.env.BUILD_OUT_DIR || 'dist/client',
        '_astro',
        basename(filepath),
      ));
    } catch (err) {
      console.error(err);
    }
  }
  return filepath;
};
const tryImageSize = (src: string) => {
  let dimensions: { width?: number, height?: number } = {};
  if (typeof src === 'string' && src.startsWith('/')) {
    try {
      dimensions = await imageSizeFromFile(getImageFilepath(src));
    } catch {
      dimensions = {};
    }
  }
  return dimensions;
};

const {
  sizes,
  media,
  sources,
  pictureAttrs,
  imgAttrs,
} = await useSSRPicture({
  ...Astro.props,
  tryImageSize,
  getPicture: createPictureGetter(async (imageOptions) => {
    let imageMetadata: ImageMetadata | undefined;
    if (imageOptions.src.startsWith('/')) {
      const imageFilepath = getImageFilepath(imageOptions.src);
      const { width, height } = tryImageSize(imageOptions.src);
      if (width && height) {
        const mimeType = lookup(imageFilepath);
        if (mimeType?.startsWith('image/')) {
          imageMetadata = {
            src: imageFilepath,
            width,
            height,
            // @ts-ignore
            format: mimeType.replace('image/', ''),
          };
        }
      }
    }
    const {
      src: absoluteSrc,
      attributes: { width, height },
    } = await getImage({
      ...imageOptions,
      src: imageMetadata || imageOptions.src,
    });
    const filename = basename(absoluteSrc);
    const src = import.meta.env.DEV ? absoluteSrc : `/_astro/${filename}`;
    return { src, width, height };
  }),
  assetsPrefix: Astro.locals.assetsPrefix,
});
if (imgAttrs?.src) {
  imgAttrs.src += versionSuffix;
}
---

<picture {...pictureAttrs}>
  {sources.map((attrs) => {
    if (versionSuffix) {
      attrs.srcset = attrs.srcset.replace(/\s(\w+)$/, `${versionSuffix} $1`);
    }
    return <source {...attrs} {sizes} {media} />;
  })}
  {imgAttrs && <img {...imgAttrs} />}
</picture>

---
// @ts-ignore: tsconfig.json missing `"types": ["vite-plugin-pwa/info"]`
import { pwaInfo } from 'virtual:pwa-info';
import {
  name as getName,
  img as getImg,
  price as getPrice,
  inStock as checkInStock,
} from '@ecomplus/utils';
import { i19searchProducts } from '@@i18n';

// @ts-ignore
const isPWA = pwaInfo !== false; // config/astro/mock-pwa-info.mjs
const {
  storeId,
  isHomepage,
  isSearchPage,
  searchPageTerm,
  cmsContent,
  fetchingApiContext,
  apiContext,
  lang,
  countryCode,
  currency,
  currencySymbol,
  domain,
  primaryColor,
  settings,
  isPreview,
  getContent,
} = Astro.locals.routeContext;
if (fetchingApiContext) {
  await fetchingApiContext;
}

const apiDoc = apiContext.doc;
const state: Record<string, any> = apiDoc || cmsContent || {};
let title: string = state.meta_title
  || state.metaTitle
  || (state.name && `${state.name} | ${settings.name}`)
  || (state.title && `${state.title} | ${settings.name}`)
  || '';
let description: string = state.meta_description
  || state.metaDescription
  || state.short_description
  || state.description
  || settings.description
  || '';
if (isHomepage) {
  if (!title) title = settings.name;
  if (!description) description = settings.description;
}
if (isSearchPage) {
  if (searchPageTerm) {
    if (!title) title = settings.name;
    title = title.replace('$term', searchPageTerm);
    if (!title.includes(searchPageTerm)) {
      title = `${searchPageTerm} | ${title}`;
    }
  } else if (!title) {
    title = `${i19searchProducts} | ${settings.name}`;
  }
}
const favicon = settings.favicon || settings.icon || '/favicon.ico';
const shortcutIcon = settings.icon || null;
const canonicalUrl = new URL(Astro.url.pathname, Astro.site || `https://${domain}`);
const { metatags: metatagsContent } = await getContent('layout');
const ogLocale = lang.length === 2 ? lang : lang.substring(0, 2) + lang.slice(3).toUpperCase();
let ogImage: string | undefined;
if (apiDoc) {
  const picture = getImg(state, undefined, 'zoom');
  ogImage = picture && picture.url;
}
if (!ogImage) {
  if (metatagsContent?.ogImage) {
    ogImage = metatagsContent.ogImage.charAt(0) === '/'
      ? `https://${domain}${metatagsContent.ogImage}` : metatagsContent.ogImage;
  }
} else {
  ogImage = ogImage.replace(/(\w+\.)?(ecoms\d)\.com/i, '$2-nyc3.nyc3.cdn.digitaloceanspaces.com');
}

let inlineClientJS = `
window.ECOM_STORE_ID = ${storeId};
window.ECOM_LANG = '${lang}';
window.ECOM_CURRENCY = '${currency}';
window.ECOM_CURRENCY_SYMBOL = '${currencySymbol}';
window.ECOM_COUNTRY_CODE = '${countryCode}';
window.GIT_BRANCH = '${import.meta.env.GIT_BRANCH || ''}';
window.$storefront = ${JSON.stringify({ settings, data: {} })};`;
if (apiContext.error) {
  const { message, statusCode } = apiContext.error;
  if (statusCode) {
    Astro.response.status = statusCode;
  }
  const url = Astro.url.pathname;
  inlineClientJS += `
console.error(${JSON.stringify(message)});
setTimeout(() => {
  window.location.replace("/~fallback?status=${statusCode}&url=${encodeURIComponent(url)}");
}, 1);`;
}
let contextInlineClientJS: string | undefined;
if (apiDoc) {
  if (typeof (apiDoc as Record<string, any>).price === 'number') {
    (apiDoc as Record<string, any>).price = getPrice(apiDoc);
  }
  const slimDocRegex = globalThis.$storefrontSlimDocRegex
    || /body_|meta_|metafields|_records|i18n/;
  const minifyApiDoc = (nestedDoc: any) => {
    if (typeof nestedDoc === 'object' && nestedDoc) {
      if (Array.isArray(nestedDoc)) {
        nestedDoc.forEach((item) => minifyApiDoc(item));
      } else {
        Object.keys(nestedDoc).forEach((field) => {
          if (slimDocRegex.test(field)) {
            delete nestedDoc[field];
          } else {
            minifyApiDoc(nestedDoc[field]);
          }
        });
      }
    }
    return nestedDoc;
  };
  inlineClientJS += `
window._firstLoadContextId = '${apiDoc._id}';`;
  contextInlineClientJS = `
$storefront.apiContext = ${JSON.stringify({
    resource: apiContext.resource,
    doc: minifyApiDoc({ ...apiDoc }),
    timestamp: Date.now(),
  })};
$storefront.context /* DEPRECATED */ = $storefront.apiContext;
_emitApiContext('${apiDoc._id}');`;
} else {
  inlineClientJS += `
window._firstLoadContextId = null;`;
  contextInlineClientJS = `
$storefront.apiContext = null;
delete $storefront.apiContext;
delete $storefront.context;
_emitApiContext();`;
}
if (isPreview) {
  inlineClientJS += `
window.$isCmsPreview = true;`;
}

const inlineJSONLdOrg = JSON.stringify({
  '@context': 'http://schema.org',
  '@type': 'Organization',
  name: settings.name,
  url: `https://${domain}/`,
  logo: `https://${domain}${settings.logo}`,
});
const inlineJSONLdWebsite = JSON.stringify({
  '@context': 'http://schema.org',
  '@type': 'WebSite',
  url: `https://${domain}/`,
  potentialAction: {
    '@type': 'SearchAction',
    target: `https://${domain}/s?q={search_term_string}`,
    'query-input': 'required name=search_term_string',
  },
});
let inlineJSONLdOffer: string | undefined;
if (apiContext.resource === 'products' && apiContext.doc) {
  const product = apiContext.doc;
  const productJSONLd: Record<string, any> = {
    '@context': 'http://schema.org',
    '@type': 'Product',
    sku: product.sku,
    description,
    name: getName(product),
    offers: {
      '@type': 'Offer',
      url: canonicalUrl,
      availability: `${(checkInStock(product) ? 'In' : 'OutOf')}Stock`,
      priceCurrency: settings.currency,
      price: getPrice(product),
      itemCondition: 'http://schema.org/'
        + `${(product.condition !== 'new' ? 'Used' : 'New')}Condition`,
      seller: {
        '@type': 'Organization',
        name: settings.name,
      },
    },
  };
  if (product.brands?.length) {
    productJSONLd.brand = {
      '@type': 'Brand',
      name: product.brands[0].name,
    };
  }
  if (product.pictures?.length) {
    productJSONLd.image = getImg(product, undefined, 'zoom')?.url
      .replace(/(\w+\.)?(ecoms\d)\.com/i, '$2-nyc3.nyc3.cdn.digitaloceanspaces.com');
  }
  if (product.mpn?.length) {
    productJSONLd.mpn = product.mpn[0];
  }
  if (product.gtin?.length) {
    productJSONLd.gtin = product.gtin[0];
  }
  inlineJSONLdOffer = JSON.stringify(productJSONLd);
}
const generator = `e-com.plus @cloudcommerce/storefront, ${Astro.generator}`;
---

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content={primaryColor}>
<link rel="icon" type="image/png" href={favicon} sizes="32x32" />
{shortcutIcon
  && <link rel="icon" type="image/png" href={shortcutIcon} sizes="192x192" />}
{title && <title>{title}</title>}
{description && <meta name="description" content={description}>}
<meta name="author" content={settings.name}>
<meta name="generator" content={generator}>
<link rel="canonical" href={canonicalUrl} />
{shortcutIcon && <link rel="apple-touch-icon" href={shortcutIcon} />}
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<meta property="og:site_name" content={settings.name}>
<meta property="og:url" content={canonicalUrl}>
<meta property="og:title" content={title}>
<meta property="og:description" content={description}>
<meta property="og:type" content="website">
<meta property="og:locale" content={ogLocale}>
{ogImage && <meta property="og:image" content={ogImage} />}
{metatagsContent?.fbAppId
  && <meta property="fb:app_id" content={metatagsContent.fbAppId} />}
<meta name="twitter:card" content="summary">
{metatagsContent?.twitterUsername
  && <meta name="twitter:site" content={metatagsContent.twitterUsername} />}
<meta name="ecom-store-id" content={String(storeId)}>

{isPWA && <>
  <script>
    /* eslint-disable */
    // @ts-ignore: tsconfig.json missing `"types": ["vite-plugin-pwa/info"]`
    import { registerSW } from 'virtual:pwa-register';
    registerSW({ immediate: false });
  </script>
  {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
  {(!pwaInfo && !import.meta.env.DEV)
    && <link rel="manifest" href="/manifest.webmanifest" />}
</>}

<script is:inline>
window.$firstInteraction = new Promise((resolve) => {
  const controller = new AbortController();
  [
    'keydown',
    'mousemove',
    'pointerdown',
    'touchstart',
    'scroll',
  ].forEach((evName) => {
    document.addEventListener(
      evName,
      () => {
        resolve();
        controller.abort();
        window.dispatchEvent(new Event('firstInteraction'));
      },
      { once: true, passive: true, signal: controller.signal },
    );
  });
});
window.$interactionOrAwaken = Promise.race([
  window.$firstInteraction,
  new Promise((resolve) => { setTimeout(resolve, 5000); }),
]);
if (!window.$delayedAsyncScripts) {
  window.$delayedAsyncScripts = [];
}
window._emitApiContext = (id = null) => {
  const { $storefront } = window;
  $storefront.url = new URL(window.location.toString());
  $storefront.getSession = (/* sid */) => ({
    url: $storefront.url,
    apiContext: $storefront.apiContext,
  });
  console.debug('[ctx] emit ' + id);
  window.dispatchEvent(new Event('storefront:apiContext'));
  window._emitedContextId = id;
  window.__sfIds = {};
};
</script>

<script is:inline set:html={inlineClientJS} />
{contextInlineClientJS && <script is:inline set:html={contextInlineClientJS} />}
<script is:inline type="application/ld+json" set:html={inlineJSONLdOrg} />
<script is:inline type="application/ld+json" set:html={inlineJSONLdWebsite} />
{inlineJSONLdOffer && <script is:inline type="application/ld+json" set:html={inlineJSONLdOffer} />}

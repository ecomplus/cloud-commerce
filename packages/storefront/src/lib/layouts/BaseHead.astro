---
import { pwaInfo } from 'virtual:pwa-info';
import { img as getImg, price as getPrice } from '@ecomplus/utils';
import ViewTransitions from '@@sf/components/ViewTransitions.astro';

export interface Props {
  hasViewTransitions?: boolean;
}

// @ts-ignore
const isPWA = pwaInfo !== false; // config/astro/mock-pwa-info.mjs
const hasViewTransitions = Astro.props.hasViewTransitions !== false
  && !Astro.url.pathname.startsWith('/app/');
const deployRand = import.meta.env.DEPLOY_RAND || '_';
const getIconUrl = (size: number) => {
  return `/_image?f=png&w=${size}&h=${size}`
    + `&href=${encodeURIComponent(settings.icon)}&V=${deployRand}`;
};

const {
  storeId,
  searchPageTerm,
  cmsContent,
  fetchingApiContext,
  apiContext,
  lang,
  countryCode,
  currency,
  currencySymbol,
  domain,
  primaryColor,
  settings,
  isPreview,
  getContent,
} = Astro.locals.routeContext;
if (fetchingApiContext) {
  await fetchingApiContext;
}

const apiDoc = apiContext.doc;
const state: Record<string, any> = apiDoc || cmsContent || {};
let title = state.meta_title ||
  state.metaTitle ||
  (state.name && `${state.name} | ${settings.name}`) ||
  (state.title && `${state.title} | ${settings.name}`) ||
  settings.name;
if (searchPageTerm) {
  title = title.replace('$term', searchPageTerm);
  if (!title.includes(searchPageTerm)) {
    title = `${searchPageTerm} | ${title}`;
  }
}
const description = state.meta_description ||
  state.metaDescription ||
  state.short_description ||
  settings.description;
const favicon = settings.icon ? getIconUrl(32) : '/favicon.ico';
const shortcutIcon = settings.icon ? getIconUrl(192) : null;
const canonicalUrl = new URL(Astro.url.pathname, Astro.site || `https://${domain}`);
const { metatags: metatagsContent } = await getContent('layout');
const ogLocale = lang.length === 2 ? lang : lang.substring(0, 2) + lang.slice(3).toUpperCase();
let ogImage: string | undefined;
if (apiDoc) {
  const picture = getImg(state, undefined, 'zoom');
  ogImage = picture && picture.url;
}
if (!ogImage) {
  if (metatagsContent?.ogImage) {
    ogImage = metatagsContent.ogImage.charAt(0) === '/'
      ? `https://${domain}${metatagsContent.ogImage}` : metatagsContent.ogImage;
  }
} else {
  ogImage = ogImage.replace(/(\w+\.)?(ecoms\d)\.com/i, '$2-nyc3.nyc3.cdn.digitaloceanspaces.com');
}

let inlineClientJS = `
window._emitApiContext = (id = null) => {
  console.log('[ctx] emit ' + id);
  window.dispatchEvent(new Event('storefront:apiContext'));
  window._emitedContextId = id;
};
window.ECOM_STORE_ID = ${storeId};
window.ECOM_LANG = '${lang}';
window.ECOM_CURRENCY = '${currency}';
window.ECOM_CURRENCY_SYMBOL = '${currencySymbol}';
window.ECOM_COUNTRY_CODE = '${countryCode}';
window.$storefront = ${JSON.stringify({ settings, data: {} })};`;
if (apiContext.error) {
  const { message, statusCode } = apiContext.error;
  const url = Astro.url.pathname;
  inlineClientJS += `
console.error(${JSON.stringify(message)});
setTimeout(() => {
  window.location.replace("/~fallback?status=${statusCode}&url=${encodeURIComponent(url)}");
}, 1);`;
}
let contextInlineClientJS: string | undefined;
if (apiDoc) {
  if (typeof apiDoc.price === 'number') {
    apiDoc.price = getPrice(apiDoc);
  }
  const slimDocRegex = globalThis.$storefrontSlimDocRegex
    || /body_|meta_|metafields|_records|i18n/;
  const minifyApiDoc = (nestedDoc: any) => {
    if (typeof nestedDoc === 'object' && nestedDoc) {
      if (Array.isArray(nestedDoc)) {
        nestedDoc.forEach((item) => minifyApiDoc(item));
      } else {
        Object.keys(nestedDoc).forEach((field) => {
          if (slimDocRegex.test(field)) {
            delete nestedDoc[field];
          } else {
            minifyApiDoc(nestedDoc[field]);
          }
        });
      }
    }
    return nestedDoc;
  };
  inlineClientJS += `
window._firstLoadContextId = '${apiDoc._id}';`;
  contextInlineClientJS = `
$storefront.apiContext = ${JSON.stringify({
  resource: apiContext.resource,
  doc: minifyApiDoc({ ...apiDoc }),
  timestamp: Date.now(),
})};
$storefront.context /* DEPRECATED */ = $storefront.apiContext;
_emitApiContext('${apiDoc._id}');`;
} else {
  inlineClientJS += `
window._firstLoadContextId = null;`;
  contextInlineClientJS = `
$storefront.apiContext = null;
delete $storefront.apiContext;
delete $storefront.context;
_emitApiContext();`;
}
if (isPreview) {
  inlineClientJS += `
window.$isCmsPreview = true;`;
}

const inlineJSONLd = JSON.stringify({
  '@context': 'http://schema.org',
  '@type': 'Organization',
  name: settings.name,
  url: `https://${domain}/`,
  logo: `https://${domain}${settings.logo}`,
});
---

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content={primaryColor}>
<link rel="icon" type="image/png" href={favicon} sizes="32x32" />
{shortcutIcon &&
  <link rel="icon" type="image/png" href={shortcutIcon} sizes="192x192" />}
<title>{title}</title>
<meta name="description" content={description}>
<meta name="author" content={settings.name}>
<meta name="generator" content={Astro.generator} />
<link rel="canonical" href={canonicalUrl} />
{shortcutIcon && <link rel="apple-touch-icon" href={shortcutIcon} />}
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<meta property="og:site_name" content={settings.name}>
<meta property="og:url" content={canonicalUrl}>
<meta property="og:title" content={title}>
<meta property="og:description" content={description}>
<meta property="og:type" content="website">
<meta property="og:locale" content={ogLocale}>
{ogImage && <meta property="og:image" content={ogImage} />}
{metatagsContent?.fbAppId &&
  <meta property="fb:app_id" content={metatagsContent.fbAppId} />}
<meta name="twitter:card" content="summary">
{metatagsContent?.twitterUsername &&
  <meta name="twitter:site" content={metatagsContent.twitterUsername} />}
<meta name="ecom-store-id" content={String(storeId)}>

{isPWA && <>
  <script>
    import { registerSW } from 'virtual:pwa-register';
    registerSW({ immediate: false });
  </script>
  {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
  {(!pwaInfo && !import.meta.env.DEV) &&
    <link rel="manifest" href="/manifest.webmanifest" />}
</>}

<script is:inline set:html={inlineClientJS} transition:persist />
<script type="application/ld+json" set:html={inlineJSONLd} />

{hasViewTransitions && <ViewTransitions fallback="none" />}
{contextInlineClientJS && <script is:inline set:html={contextInlineClientJS} />}

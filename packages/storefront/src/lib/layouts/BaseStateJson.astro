---
import type { PageContext } from '@@sf/ssr-context';
import { price as getPrice } from '@ecomplus/utils';

export interface Props {
  pageContext: PageContext;
}

const {
  pageContext: {
    storeId,
    apiResource,
    apiDoc,
    lang,
    countryCode,
    currency,
    currencySymbol,
    domain,
    settings,
    isPreview,
  },
} = Astro.props as Props;

let inlineClientJS = `
window.ECOM_STORE_ID = ${storeId};
window.ECOM_LANG = '${lang}';
window.ECOM_CURRENCY = '${currency}';
window.ECOM_CURRENCY_SYMBOL = '${currencySymbol}';
window.ECOM_COUNTRY_CODE = '${countryCode}';
window.$storefront = ${JSON.stringify({ settings })};`;
if (apiDoc) {
  if (typeof apiDoc.price === 'number') {
    apiDoc.price = getPrice(apiDoc);
  }
  const slimDocRegex = globalThis.$storefrontSlimDocRegex
    || /body_|meta_|metafields|_records|i18n/;
  const minifyApiDoc = (nestedDoc: any) => {
    if (typeof nestedDoc === 'object' && nestedDoc) {
      if (Array.isArray(nestedDoc)) {
        nestedDoc.forEach((item) => minifyApiDoc(item));
      } else {
        Object.keys(nestedDoc).forEach((field) => {
          if (slimDocRegex.test(field)) {
            delete nestedDoc[field];
          } else {
            minifyApiDoc(nestedDoc[field]);
          }
        });
      }
    }
    return nestedDoc;
  };
  inlineClientJS += `
window.$storefront.context = ${JSON.stringify({
  resource: apiResource,
  doc: minifyApiDoc({ ...apiDoc }),
  timestamp: Date.now(),
})};`;
}
if (isPreview) {
  inlineClientJS += `
window.$isCmsPreview = true;`;
}

const inlineJSONLd = JSON.stringify({
  '@context': 'http://schema.org',
  '@type': 'Organization',
  name: settings.name,
  url: `https://${domain}/`,
  logo: `https://${domain}${settings.logo}`,
});
---

<script is:inline set:html={inlineClientJS} />
<script type="application/ld+json" set:html={inlineJSONLd} />

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Triggered to calculate shipping options, must return calculated values and times
 */
export interface CalculateShippingParams {
  /**
   * Products composing the cart
   *
   * @maxItems 3000
   */
  items?: {
    /**
     * Product ID
     */
    product_id: string;
    /**
     * ID to specify the variation added to cart, if product has variations
     */
    variation_id?: string;
    /**
     * Product or variation unique reference code
     */
    sku?: string;
    /**
     * Product or variation full name, or other label for this cart item
     */
    name?: string;
    /**
     * Item quantity in cart
     */
    quantity: number;
    /**
     * Warehouses by code and respective product stock
     */
    inventory?: {
      /**
       * Product quantity available for sale from current warehouse
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Za-z0-9-_]{2,30}$".
       */
      [k: string]: number;
    };
    /**
     * Designator of currency according to ISO 4217 (3 uppercase letters)
     */
    currency_id?: string;
    /**
     * Graphic symbol used as a shorthand for currency's name
     */
    currency_symbol?: string;
    /**
     * Product sale price specifically for this cart
     */
    price: number;
    /**
     * Final item price including additions due to customizations and gift wrap
     */
    final_price?: number;
    /**
     * Product dimensions with packaging for freight calculation
     */
    dimensions?: {
      /**
       * Package width, height and length
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^width|height|length$".
       */
      [k: string]: {
        /**
         * Size in specified unit
         */
        value: number;
        /**
         * Unit of measurement
         */
        unit?: 'mm' | 'cm' | 'm' | 'ft' | 'in' | 'yd' | 'mi';
      };
    };
    /**
     * Package weight for freight calculation
     */
    weight?: {
      /**
       * Size in specified unit
       */
      value: number;
      /**
       * Unit of measurement
       */
      unit?: 'mg' | 'g' | 'kg' | 'lb' | 'oz';
    };
  }[];
  /**
   * The sum of all items prices
   */
  subtotal?: number;
  from?: Address;
  to?: Address1;
  /**
   * Whether the package must be delivered with additional service "own hand"
   */
  own_hand?: boolean;
  /**
   * If the package will be delivered with acknowledgment of receipt
   */
  receipt?: boolean;
  /**
   * Code of service defined by carrier, if shipping method is already defined
   */
  service_code?: string;
  /**
   * Language two letters code, sometimes with region, eg.: pt_br, fr, en_us
   */
  lang?: string;
  /**
   * Whether shipping were already chosen and is just being confirmed to complete checkout
   */
  is_checkout_confirmation?: boolean;
}
/**
 * Sender's address
 */
export interface Address {
  /**
   * ZIP (CEP, postal...) code
   */
  zip: string;
  /**
   * Street or public place name
   */
  street?: string;
  /**
   * House or building street number
   */
  number?: number;
  /**
   * Address complement or second line, such as apartment number
   */
  complement?: string;
  /**
   * Borough name
   */
  borough?: string;
  /**
   * Some optional other reference for this address
   */
  near_to?: string;
  /**
   * Full in line mailing address, should include street, number and borough
   */
  line_address?: string;
  /**
   * City name
   */
  city?: string;
  /**
   * Country name
   */
  country?: string;
  /**
   * An ISO 3166-2 country code
   */
  country_code?: string;
  /**
   * Province or state name
   */
  province?: string;
  /**
   * The two-letter code for the province or state
   */
  province_code?: string;
  /**
   * The name of recipient, generally is the customer's name
   */
  name?: string;
  /**
   * The recipient's last name
   */
  last_name?: string;
  /**
   * Customer phone number for this mailing address
   */
  phone?: {
    /**
     * Country calling code (without +), defined by standards E.123 and E.164
     */
    country_code?: number;
    /**
     * The actual phone number, digits only
     */
    number: string;
  };
}
/**
 * Shipping address (recipient)
 */
export interface Address1 {
  /**
   * ZIP (CEP, postal...) code
   */
  zip: string;
  /**
   * Street or public place name
   */
  street?: string;
  /**
   * House or building street number
   */
  number?: number;
  /**
   * Address complement or second line, such as apartment number
   */
  complement?: string;
  /**
   * Borough name
   */
  borough?: string;
  /**
   * Some optional other reference for this address
   */
  near_to?: string;
  /**
   * Full in line mailing address, should include street, number and borough
   */
  line_address?: string;
  /**
   * City name
   */
  city?: string;
  /**
   * Country name
   */
  country?: string;
  /**
   * An ISO 3166-2 country code
   */
  country_code?: string;
  /**
   * Province or state name
   */
  province?: string;
  /**
   * The two-letter code for the province or state
   */
  province_code?: string;
  /**
   * The name of recipient, generally is the customer's name
   */
  name?: string;
  /**
   * The recipient's last name
   */
  last_name?: string;
  /**
   * Customer phone number for this mailing address
   */
  phone?: {
    /**
     * Country calling code (without +), defined by standards E.123 and E.164
     */
    country_code?: number;
    /**
     * The actual phone number, digits only
     */
    number: string;
  };
}

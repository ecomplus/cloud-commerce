/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Triggered when listing payments, must return available methods
 */
export interface ListPaymentsResponse {
  /**
   * Optional default installments option
   */
  installments_option?: {
    /**
     * Minimum installment value
     */
    min_installment?: number;
    /**
     * Maximum number of installments
     */
    max_number: number;
    /**
     * Monthly tax applied, 0 means interest free
     */
    monthly_interest?: number;
  };
  /**
   * Optional default discount option by payment method
   */
  discount_option?: {
    /**
     * Minimum amount to apply the discount
     */
    min_amount?: number;
    /**
     * Name of payment method that handle the discount
     */
    label?: string;
    /**
     * In which value the discount will be applied at checkout
     */
    apply_at?: 'total' | 'subtotal';
    /**
     * Discount type
     */
    type?: 'percentage' | 'fixed';
    /**
     * Discount value, percentage or fixed
     */
    value?: number;
  };
  /**
   * Available loyalty point programs, program ID as property
   */
  loyalty_points_programs?: {
    /**
     * Available loyalty points program object
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z0-9_]{2,30}$".
     */
    [k: string]: {
      /**
       * The name of the loyalty points program
       */
      name?: string;
      /**
       * The ratio of a point when converted to currency
       */
      ratio: number;
      /**
       * Maximum number of points to apply
       */
      max_points?: number;
      /**
       * Minimum cart subtotal to earn new points
       */
      min_subtotal_to_earn?: number;
      /**
       * Subtotal percentage that will be converted into new points on purchase
       */
      earn_percentage?: number;
    };
  };
  /**
   * Payment gateway options list
   *
   * @maxItems 30
   */
  payment_gateways: {
    /**
     * Name of payment method shown to customers
     */
    label: string;
    /**
     * Auxiliary text about the payment method, can contain HTML tags
     */
    text?: string;
    /**
     * Payment icon image URI
     */
    icon?: string;
    /**
     * Payment intermediator
     */
    intermediator?: {
      /**
       * Name of payment intermediator
       */
      name?: string;
      /**
       * URI to intermediator website
       */
      link?: string;
      /**
       * Gateway name standardized as identification code
       */
      code: string;
    };
    /**
     * Base URI to payments
     */
    payment_url?: string;
    /**
     * Transaction type
     */
    type?: 'payment' | 'recurrence';
    /**
     * Payment method object
     */
    payment_method: {
      /**
       * Standardized payment method code
       */
      code:
        | 'credit_card'
        | 'banking_billet'
        | 'online_debit'
        | 'account_deposit'
        | 'debit_card'
        | 'balance_on_intermediary'
        | 'loyalty_points'
        | 'other';
      /**
       * Short description for payment method
       */
      name?: string;
    };
    /**
     * Discount to be applied by payment method
     */
    discount?: {
      /**
       * In which value the discount will be applied at checkout
       */
      apply_at?: 'total' | 'subtotal' | 'freight';
      /**
       * Discount type
       */
      type?: 'percentage' | 'fixed';
      /**
       * Discount value, percentage or fixed
       */
      value?: number;
    };
    /**
     * List of accepted card brands
     *
     * @maxItems 30
     */
    card_companies?: string[];
    /**
     * List of options for installment
     *
     * @maxItems 30
     */
    installment_options?: {
      /**
       * Number of installments
       */
      number: number;
      /**
       * Installment value
       */
      value: number;
      /**
       * Tax applied
       */
      tax?: boolean;
    }[];
    /**
     * Gateway web JS SDK, usually to handle credit cards with encryption
     */
    js_client?: {
      /**
       * Script (JS) link
       */
      script_uri: string;
      /**
       * Optional script link to try if the first URI goes offline
       */
      fallback_script_uri?: string;
      /**
       * JS expression to run (with `eval`) after script load
       */
      onload_expression?: string;
      /**
       * Append HTML to render payment iframe/components on checkout
       */
      container_html?: string;
      /**
       * Checkout promise variable (on `window`) resolved with transaction-like object
       */
      transaction_promise?: string;
      /**
       * Function to call for credit card hash generation, must return hash string
       */
      cc_hash?: {
        /**
         * Func name, receives obj with `name`, `doc`, `number`, `cvc`, `month`, `year`
         */
        function: string;
        /**
         * If it is a Promise, use for async process
         */
        is_promise?: boolean;
      };
      /**
       * Optional function to get `installment_options` array from card number
       */
      cc_installments?: {
        /**
         * Func name, receives obj with `number` and `amount` (total)
         */
        function: string;
        /**
         * If it is a Promise, use for async process
         */
        is_promise?: boolean;
      };
      /**
       * Optional function to call for card validation, returns brand name or false
       */
      cc_brand?: {
        /**
         * Func name, receives obj with `number`
         */
        function: string;
        /**
         * If it is a Promise, use for async process
         */
        is_promise?: boolean;
      };
    };
    /**
     * Resend list payments request if this payment gateway is selected
     */
    fetch_when_selected?: boolean;
  }[];
  /**
   * [DEPRECATED] => use `installments_option` instead
   */
  interest_free_installments?: number;
}
